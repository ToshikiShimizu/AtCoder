V, E = map(int, input().split())
INF = 10**10
cost = [[(INF,0)]*V for _ in range(V)] # 重み
for e in range(E):
    s, t, d, time= map(int,input().split())
    cost[s-1][t-1] = (d, time)
    cost[t-1][s-1] = (d, time)

dp = [[-1] * V for _ in range(1<<V)] # dp[S][v]

def dfs(S, v, dp):
    if dp[S][v] != -1: # 訪問済みならメモを返す
        return dp[S][v], 1
    if S==(1<<V)-1 and v==0: # 全ての頂点を訪れて頂点0に戻ってきた
        return 0, 1 # もう動く必要はない

    res = [INF, 0]
    for u in range(V):
        if S>>u & 1 == 0: # 未訪問かどうか
            r = dfs(S|1<<u, u, dp)
            if res[0] + cost[v][u][0] <= cost[v][u][1]:
                #res[0] = min(res[0], r+cost[v][u][0])
                if res[0] < r[0] + cost[v][u][0]:
                    res[0] = r[0] + cost[v][u][0]
                    res[1] = r[1]
                elif res == r+cost[v][u][0]:
                    res[1] += r[1]
            #res = min(res, dfs(S|1<<u, u, dp)+cost[v][u][0])
    
    dp[S][v] = res[0]
    return res

ans = dfs(0, 0, dp) # 頂点0からスタートする。ただし頂点0は未訪問とする
if ans == INF:
    print('IMPOSSIBLE')
else:
    print (ans)